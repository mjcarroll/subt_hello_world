/*
 * Copyright (C) 2020 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#ifndef CAMERA_FIX__FIX_CAMERA_HH_
#define CAMERA_FIX__FIX_CAMERA_HH_

#include <ros/ros.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/CameraInfo.h>

/// \class FixingNode fix_camera.hpp
/// \brief Class for fixing Gazebo's camera orientation to fit Ros conventions.
class FixingNode
{
  public:
    /// \brief Contstructor
    FixingNode();

  private:
    /// \brief Re-publisher of Gazebo's Image message.
    /// Subscribes to Gazebo's sensor_msgs::Image message, changes
    /// it's frame_id and republishes it into the "output/image_raw" topic
    /// \param[in] img The image message to fix, generated by Gazebo.
    void fixImgMsg(const sensor_msgs::Image::Ptr & img);

    /// \brief Re-publisher of Gazebo's CameraInfo message.
    /// Subscribes to Gazebo's sensor_msgs::CameraInfo message, changes
    /// it's frame_id and republishes it into the "output/camera_info" topic
    /// \param[in] img The CameraInfo message to fix, generated by Gazebo.
    void fixCamMsg(const sensor_msgs::CameraInfo::Ptr & cam);

    /// \brief Used to store the new_frame_id parameter on startup.
    /// This is the new frame_id that is going to replace the old one in the messages.
    std::string new_frame_id_;

    /// \brief ROS nodehandle. Used for subscribing to the Image and CameraInfo messages.
    /// Also used for publishing the modified messages.
    ros::NodeHandle nh_;

    /// \brief Subscriber for incoming sensor_msgs::Image message.
    ros::Subscriber imgSub_;

    /// \brief Subscriber for incoming sensor_msgs::CameraInfo message.
    ros::Subscriber camSub_;

    /// \brief Publisher for incoming sensor_msgs::Image message.
    /// Used to republish the modified Image message.
    ros::Publisher imgPub_;

    /// \brief Publisher for incoming sensor_msgs::CameraInfo message.
    /// Used to republish the modified CameraInfo message.
    ros::Publisher camPub_;
};

#endif  // CAMERA_FIX__FIX_CAMERA_HH_
